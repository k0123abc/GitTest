安装Git
$ git config --global user.name "Your Name"

$ git config --global user.email "email@example.com"


创建版本库
$ mkdir learngit
$ cd learngit
$ pwd

$ git init

$ git add readme.txt

$ git commit -m "wrote a readme file"

$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."

$ cat readme.txt


时光机穿梭
git status

$ git diff readme.txt 


版本回退
git log

git log --pretty=oneline

$ git reset --hard HEAD^
$ git reset --hard HEAD^^^
$ git reset --hard HEAD~100

$ git reset --hard 3628164

git reflog


工作区和暂存区
就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。


管理修改
第一次修改 -> git add -> 第二次修改 -> git commit
git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交
你可以继续git add再git commit，也可以别着急提交第一次修改，先git add第二次修改，再git commit，就相当于把两次修改合并后一块提交了
第一次修改 -> git add -> 第二次修改 -> git add -> git commit


撤销修改
$ git checkout -- readme.txt
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。

$ git reset HEAD readme.txt
可以把暂存区的修改撤销掉


删除文件
$ rm test.txt
$ git rm test.txt
$ git commit -m "remove test.txt"
删错了
$ rm test.txt
$ git checkout -- test.txt


远程仓库
在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有
$ ssh-keygen -t rsa -C "youremail@example.com"
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容


添加远程库
本地仓库与远程仓库关联
$ git remote add origin git@github.com:michaelliao/learngit.git

把本地库的所有内容推送到远程库上
$ git push -u origin master
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

$ git push origin master


从远程库克隆
$ git clone git@github.com:michaelliao/gitskills.git
GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。


创建与合并分支
$ git checkout -b dev
命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev

$ git branch

合并指定分支到当前分支
$ git merge dev

$ git branch -d dev


解决冲突
$ git merge feature1
$ git status
Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存
$ git add readme.txt 
$ git commit -m "conflict fixed"

git log --graph
$ git log --graph --pretty=oneline --abbrev-commit


分支管理策略
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
$ git merge --no-ff -m "merge with no-ff" dev

首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。


Bug分支
$ git stash
去其他分支解决bug
$ git stash list

git stash apply
git stash drop

恢复的同时把stash内容也删了
git stash pop

你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash
$ git stash apply stash@{0}


Feature分支
丢弃一个没有被合并过的分支
$ git branch -D feature-vulcan


多人协作
查看远程库的信息
$ git remote
$ git remote -v
推送分支
$ git push origin master
$ git push origin dev

创建远程origin的dev分支到本地
$ git checkout -b dev origin/dev

$ git pull
没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接
$ git branch --set-upstream dev origin/dev
$ git pull


创建标签
$ git tag v1.0
$ git tag

$ git log --pretty=oneline --abbrev-commit
$ git tag v0.9 6224937

$ git show v0.9

$ git tag -a v0.1 -m "version 0.1 released" 3628164

$ git tag -s v0.2 -m "signed version 0.2 released" fec145a


操作标签
删除
$ git tag -d v0.1
推送某个标签到远程
$ git push origin v1.0
一次性推送全部尚未推送到远程的本地标签
$ git push origin --tags
要删除远程标签
$ git tag -d v0.9
$ git push origin :refs/tags/v0.9


自定义Git
$ git config --global color.ui true


忽略特殊文件
$ git add -f App.class


配置别名
$ git config --global alias.st status























